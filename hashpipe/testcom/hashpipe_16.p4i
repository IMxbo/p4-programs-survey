# 1 "hashpipe_16.p4"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "hashpipe_16.p4"

# 1 "/usr/local/share/p4c/p4include/core.p4" 1
# 23 "/usr/local/share/p4c/p4include/core.p4"
error {
    NoError,
    PacketTooShort,
    NoMatch,
    StackOutOfBounds,
    HeaderTooShort,
    ParserTimeout
}

extern packet_in {



    void extract<T>(out T hdr);




    void extract<T>(out T variableSizeHeader,
                    in bit<32> variableFieldSizeInBits);



    T lookahead<T>();

    void advance(in bit<32> sizeInBits);


    bit<32> length();
}

extern packet_out {



    void emit<T>(in T hdr);
}




extern void verify(in bool check, in error toSignal);


@name("NoAction")
action NoAction() {}




match_kind {

    exact,

    ternary,

    lpm
}
# 3 "hashpipe_16.p4" 2
# 1 "/usr/local/share/p4c/p4include/v1model.p4" 1
# 22 "/usr/local/share/p4c/p4include/v1model.p4"
# 1 "/usr/local/share/p4c/p4include/core.p4" 1
# 23 "/usr/local/share/p4c/p4include/v1model.p4" 2

match_kind {
    range,

    selector
}


@metadata @name("standard_metadata")
struct standard_metadata_t {
    bit<9> ingress_port;
    bit<9> egress_spec;
    bit<9> egress_port;
    bit<32> clone_spec;
    bit<32> instance_type;
    bit<1> drop;
    bit<16> recirculate_port;
    bit<32> packet_length;
# 50 "/usr/local/share/p4c/p4include/v1model.p4"
    @alias("queueing_metadata.enq_timestamp") bit<32> enq_timestamp;
    @alias("queueing_metadata.enq_qdepth") bit<19> enq_qdepth;
    @alias("queueing_metadata.deq_timedelta") bit<32> deq_timedelta;
    @alias("queueing_metadata.deq_qdepth") bit<19> deq_qdepth;

    @alias("intrinsic_metadata.ingress_global_timestamp") bit<48> ingress_global_timestamp;
    @alias("intrinsic_metadata.lf_field_list") bit<32> lf_field_list;
    @alias("intrinsic_metadata.mcast_grp") bit<16> mcast_grp;
    @alias("intrinsic_metadata.resubmit_flag") bit<1> resubmit_flag;
    @alias("intrinsic_metadata.egress_rid") bit<16> egress_rid;

    bit<1> checksum_error;
}

enum CounterType {
    packets,
    bytes,
    packets_and_bytes
}

enum MeterType {
    packets,
    bytes
}

extern counter {
    counter(bit<32> size, CounterType type);
    void count(in bit<32> index);
}

extern direct_counter {
    direct_counter(CounterType type);
    void count();
}

extern meter {
    meter(bit<32> size, MeterType type);
    void execute_meter<T>(in bit<32> index, out T result);
}

extern direct_meter<T> {
    direct_meter(MeterType type);
    void read(out T result);
}

extern register<T> {
    register(bit<32> size);
    void read(out T result, in bit<32> index);
    void write(in bit<32> index, in T value);
}


extern action_profile {
    action_profile(bit<32> size);
}


extern void random(out bit<32> result, in bit<32> lo, in bit<32> hi);


extern void digest<T>(in bit<32> receiver, in T data);

enum HashAlgorithm {
    crc32,
    crc32_custom,
    crc16,
    crc16_custom,
    random,
    identity,
    csum16,
    xor16
}

extern void mark_to_drop();
extern void hash<O, T, D, M>(out O result, in HashAlgorithm algo, in T base, in D data, in M max);

extern action_selector {
    action_selector(HashAlgorithm algorithm, bit<32> size, bit<32> outputWidth);
}

enum CloneType {
    I2E,
    E2E
}

@deprecated("Please use verify_checksum/update_checksum instead.")
extern Checksum16 {
    Checksum16();
    bit<16> get<D>(in D data);
}
# 154 "/usr/local/share/p4c/p4include/v1model.p4"
extern void verify_checksum<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);
# 166 "/usr/local/share/p4c/p4include/v1model.p4"
extern void update_checksum<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);
# 182 "/usr/local/share/p4c/p4include/v1model.p4"
extern void verify_checksum_with_payload<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);
# 195 "/usr/local/share/p4c/p4include/v1model.p4"
extern void update_checksum_with_payload<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);

extern void resubmit<T>(in T data);
extern void recirculate<T>(in T data);
extern void clone(in CloneType type, in bit<32> session);
extern void clone3<T>(in CloneType type, in bit<32> session, in T data);

extern void truncate(in bit<32> length);




extern value_set<D> {
    value_set(bit<8> size);
    bool is_member(in D data);
}







parser Parser<H, M>(packet_in b,
                    out H parsedHdr,
                    inout M meta,
inout standard_metadata_t standard_metadata);




control VerifyChecksum<H, M>(inout H hdr,
                             inout M meta);
@pipeline
control Ingress<H, M>(inout H hdr,
                      inout M meta,
                      inout standard_metadata_t standard_metadata);
@pipeline
control Egress<H, M>(inout H hdr,
                     inout M meta,
                     inout standard_metadata_t standard_metadata);




control ComputeChecksum<H, M>(inout H hdr,
                              inout M meta);
@deparser
control Deparser<H>(packet_out b, in H hdr);

package V1Switch<H, M>(Parser<H, M> p,
                       VerifyChecksum<H, M> vr,
                       Ingress<H, M> ig,
                       Egress<H, M> eg,
                       ComputeChecksum<H, M> ck,
                       Deparser<H> dep
                       );
# 4 "hashpipe_16.p4" 2
# 13 "hashpipe_16.p4"
header ethernet_t {
    bit<48> dstAddr;
    bit<48> srcAddr;
    bit<16> etherType;
}

header ipv4_t {
    bit<4> version;
    bit<4> ihl;
    bit<8> diffserv;
    bit<16> totalLen;
    bit<16> identification;
    bit<3> flags;
    bit<13> fragOffset;
    bit<8> ttl;
    bit<8> protocol;
    bit<16> hdrChecksum;
    bit<32> srcAddr;
    bit<32> dstAddr;
}






struct headers {
    ethernet_t ethernet;
    ipv4_t ipv4;
}

struct tracking_metadata_t {
    bit<32> mKeyInTable;
    bit<32> mCountInTable;
    bit<5> mIndex;
    bit<1> mValid;
    bit<32> mKeyCarried;
    bit<32> mCountCarried;
    bit<32> mDiff;
    bit<32> nhop_ipv4;
}






parser MyParser(packet_in packet,
                out headers hdr,
                inout tracking_metadata_t hh_meta,
                inout standard_metadata_t standard_metadata) {

    state start {
        transition parse_ethernet;
    }

    state parse_ethernet {
        packet.extract(hdr.ethernet);
        transition select(hdr.ethernet.etherType) {
            0x0800 : parse_ipv4;
            default: accept;
        }
    }

    state parse_ipv4 {
        packet.extract(hdr.ipv4);
        transition accept;
    }

}






control MyVerifyChecksum(inout headers hdr, inout tracking_metadata_t hh_meta) {
    apply { }
}






control MyIngress(inout headers hdr,
                  inout tracking_metadata_t hh_meta,
                  inout standard_metadata_t standard_metadata) {

    register<bit<32>>(32) flow_tracker_stage1;
    register<bit<32>>(32) packet_counter_stage1;
    register<bit<1>>(32) valid_bit_stage1;

    register<bit<32>>(32) flow_tracker_stage2;
    register<bit<32>>(32) packet_counter_stage2;
    register<bit<1>>(32) valid_bit_stage2;

    register<bit<32>>(16) drops_register;
    register<bit<1>>(16) drops_register_enabled;

    action do_stage1() {

        hh_meta.mKeyCarried = hdr.ipv4.srcAddr;
        hh_meta.mCountCarried = 0;


        hash(hh_meta.mIndex, HashAlgorithm.csum16, (bit<16>)0, {hh_meta.mKeyCarried}, (bit<32>)32);



        flow_tracker_stage1.read(hh_meta.mKeyInTable, (bit<32>)hh_meta.mIndex);

        packet_counter_stage1.read(hh_meta.mCountInTable, (bit<32>)hh_meta.mIndex);

        valid_bit_stage1.read(hh_meta.mValid, (bit<32>)hh_meta.mIndex);


        hh_meta.mKeyInTable = (hh_meta.mValid == 0) ? hh_meta.mKeyCarried : hh_meta.mKeyInTable;
        hh_meta.mDiff = (hh_meta.mValid == 0) ? 0 : hh_meta.mKeyInTable - hh_meta.mKeyCarried;



        flow_tracker_stage1.write((bit<32>)hh_meta.mIndex, hdr.ipv4.srcAddr);

        packet_counter_stage1.write((bit<32>)hh_meta.mIndex, ((hh_meta.mDiff == 0)? hh_meta.mCountInTable + 1 : 1));

        valid_bit_stage1.write((bit<32>)hh_meta.mIndex, 1);


        hh_meta.mKeyCarried = ((hh_meta.mDiff == 0) ? 0:
        hh_meta.mKeyInTable);
        hh_meta.mCountCarried = ((hh_meta.mDiff == 0) ? 0:
        hh_meta.mCountInTable);
    }

    action do_stage2() {

        hash(hh_meta.mIndex, HashAlgorithm.csum16, (bit<16>)0, {hh_meta.mKeyCarried}, (bit<32>)32);


        flow_tracker_stage2.read(hh_meta.mKeyInTable, (bit<32>)hh_meta.mIndex);
        packet_counter_stage2.read(hh_meta.mCountInTable, (bit<32>)hh_meta.mIndex);
        valid_bit_stage2.read(hh_meta.mValid, (bit<32>)hh_meta.mIndex);


        hh_meta.mKeyInTable = (hh_meta.mValid == 0)? hh_meta.mKeyCarried : hh_meta.mKeyInTable;
        hh_meta.mDiff = (hh_meta.mValid == 0)? 0 : hh_meta.mKeyInTable - hh_meta.mKeyCarried;


        flow_tracker_stage2.write((bit<32>)hh_meta.mIndex, ((hh_meta.mDiff == 0)?
        hh_meta.mKeyInTable : ((hh_meta.mCountInTable <
        hh_meta.mCountCarried) ? hh_meta.mKeyCarried :
        hh_meta.mKeyInTable)));
        packet_counter_stage2.write((bit<32>)hh_meta.mIndex, ((hh_meta.mDiff == 0)?
        hh_meta.mCountInTable + hh_meta.mCountCarried :
        ((hh_meta.mCountInTable < hh_meta.mCountCarried) ?
        hh_meta.mCountCarried : hh_meta.mCountInTable)));
        valid_bit_stage2.write((bit<32>)hh_meta.mIndex, ((hh_meta.mValid == 0) ?
        ((hh_meta.mKeyCarried == 0) ? (bit<1>)0 : 1) : (bit<1>)1));


        hh_meta.mKeyCarried = ((hh_meta.mDiff == 0) ? 0:
        hh_meta.mKeyInTable);
        hh_meta.mCountCarried = ((hh_meta.mDiff == 0) ? 0:
        hh_meta.mCountInTable);
    }

    action _drop() {
        mark_to_drop();
    }

    action do_drop_expired() {
        bit<32> value_tmp;
        bit<1> valid_tmp;
        drops_register.read(value_tmp, (bit<32>)0);
        drops_register_enabled.read(valid_tmp, (bit<32>)0);
        value_tmp = value_tmp + ((valid_tmp == 1) ? (bit<32>)1 : 0);
        drops_register.write((bit<32>)0, value_tmp);
        _drop();
    }

    action set_nhop(bit<32> nhop_ipv4, bit<9> port) {
        hh_meta.nhop_ipv4 = nhop_ipv4;
        standard_metadata.egress_spec = port;
        hdr.ipv4.ttl = hdr.ipv4.ttl - 1;
    }

    action set_dmac(bit<48> dmac) {
        hdr.ethernet.dstAddr = dmac;


    }

    table tbl_do_stage1 {
        actions = {do_stage1;}
        default_action = do_stage1();
    }

    table tbl_do_stage2 {
        actions = {do_stage2;}
        default_action = do_stage2();
    }

    table tbl_drop_expired {
        actions = {do_drop_expired;}
        default_action = do_drop_expired();
    }

    table ipv4_lpm {
        key = {
            hdr.ipv4.dstAddr : lpm;
        }
        actions = {
            set_nhop;
            _drop;
        }
        size = 512;
    }

    table forward {
        key = {
            hh_meta.nhop_ipv4 : exact;
        }
        actions = {
            set_dmac;
            _drop;
        }
        size = 512;
    }

    apply {
        tbl_do_stage1.apply();
        tbl_do_stage2.apply();

        if (hdr.ipv4.isValid()) {
            if (hdr.ipv4.ttl > 1) {
                ipv4_lpm.apply();
                forward.apply();
            } else {
                tbl_drop_expired.apply();
            }
        }
    }

}





control MyEgress(inout headers hdr,
                 inout tracking_metadata_t hh_meta,
                 inout standard_metadata_t standard_metadata) {

    action _drop() {
        mark_to_drop();
    }

    action rewrite_mac(bit<48> smac) {
        hdr.ethernet.srcAddr = smac;
    }

    table send_frame {
        key = {
            standard_metadata.egress_port: exact;
        }
        actions = {
            rewrite_mac;
            _drop;
        }
        size = 256;
    }

    apply {
        send_frame.apply();
    }
}





control MyComputeChecksum(inout headers hdr, inout tracking_metadata_t hh_meta) {
     apply {
 update_checksum(
     hdr.ipv4.isValid(),
            { hdr.ipv4.version,
       hdr.ipv4.ihl,
              hdr.ipv4.diffserv,
              hdr.ipv4.totalLen,
              hdr.ipv4.identification,
              hdr.ipv4.flags,
              hdr.ipv4.fragOffset,
              hdr.ipv4.ttl,
              hdr.ipv4.protocol,
              hdr.ipv4.srcAddr,
              hdr.ipv4.dstAddr },
            hdr.ipv4.hdrChecksum,
            HashAlgorithm.csum16);
    }
}





control MyDeparser(packet_out packet, in headers hdr) {
    apply {
        packet.emit(hdr.ethernet);
        packet.emit(hdr.ipv4);
    }
}





V1Switch(
MyParser(),
MyVerifyChecksum(),
MyIngress(),
MyEgress(),
MyComputeChecksum(),
MyDeparser()
) main;
